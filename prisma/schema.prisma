// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  credits       Int       @default(100)
  likes         Like[]
  songs         Song[]
  purchases     Purchase[]
  walletAddress String?   // User's Solana wallet address

  @@unique([email])
  @@map("user")
}

model Song {
  id                String     @id @default(cuid())
  title             String
  s3Key             String?
  thumbnailS3Key    String?
  status            String     @default("queued")
  instrumental      Boolean    @default(false)
  prompt            String?
  lyrics            String?
  fullDescribedSong String?
  describedLyrics   String?
  guidanceScale     Float?
  inferStep         Float?
  audioDuration     Float?
  seed              Float?
  published         Boolean    @default(false)
  listenCount       Int        @default(0)
  likes             Like[]
  categories        Category[]
  purchases         Purchase[]
  
  // NFT and Payment fields
  price             Float?     @default(0.0)  // Price in SOL
  isForSale         Boolean    @default(false)
  nftMintAddress    String?    // Solana NFT mint address
  nftMetadata       String?    // JSON metadata for NFT
  royaltyPercentage Float?     @default(5.0)  // Royalty percentage for creator

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([s3Key])
}

model Purchase {
  id              String   @id @default(cuid())
  song            Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId          String
  buyer           User     @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId         String
  sellerId        String   // ID of the song creator
  amount          Float    // Amount paid in SOL
  transactionHash String?  // Solana transaction hash
  nftMintAddress  String?  // NFT mint address if created
  status          String   @default("pending") // pending, completed, failed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([songId])
  @@index([buyerId])
  @@index([transactionHash])
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String

  @@id([userId, songId])
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  songs Song[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
